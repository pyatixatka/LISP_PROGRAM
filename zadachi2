;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;

;;; Задание №1
;;; Зинченко В.Д.
;;; Определите FUNCALL через функционал APPLY
;;;

(defun FFuncall (f &rest lst) 
  (apply f lst))
  
;;;
;;; (FFuncall #'+ 1 2 3 4 5)
;;; 15
;;; (FFuncall #'+ )
;;; 0
;;; (FFuncall #'list '(a b c d e) '(1 2 3 4 5))
;;; ((A B C D E) (1 2 3 4 5))
;;;

;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;

;;; Задание №5
;;; Зинченко В.Д.
;;;  Определите функциональный предикат, который ис-
;;; инен, когда, являющейся функциональным аргументом предикат пред исти-
;;; нен хотя бы для одного элемента списка.

(defun  истина (p lst)
   (not (null (mapcan #'(lambda (x) (if (funcall p x) (list t) nil) ) lst))))

;;;
;;; (истина 'evenp '(1 2 3 5 7))
;;; (истина (lambda (x) (not (= x 0))) '(0 0 0 0 1 0)))
;;; (истина 'evenp '(1 3 5 7)))
;;; (истина (lambda (x) (not (= x 0))) '(0 0 0)))

;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;

;;; Задание №7
;;; Зинченко В.Д.
;;;  Определите фильтр (УДАЛИТЬ-ЕСЛИ-НЕ), удаляющий из списка список
;;; все элементы, которые не обладают свойством, наличие которого проверяет
;;; предикат.

(defun Удалить_Если_Не (p lst)
	(mapcan #'(lambda (x) (if (funcall p x) (list x) nil)) lst)
) 

;;;
;;; (Удалить_Если_Не  #'evenp '(1 2 3 4 5 6 7 9))
;;; (2 4 6 8)
;;; (Удалить_Если_Не  #'oddp '(1 2 3 4 5 6 7))
;;; (1 3 5 7)

;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;

;;; Задание №13
;;; Зинченко В.Д.
;;; Определите функцию, которая возвращает в качестве значения свое определе-
;;; ние (лямбда-выражение).

(defun func (&rest x)
    (symbol-function 'func))
 
;;;
;;; (func)
;;; (func 1 2 3)
;;; (func 'd)


;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;=;

;;; Задание №11
;;; Зинченко В.Д.
;;; Определите фукнционал МНОГОФУН, который использует функции, являющиеся
;;; аргументами, по следующей схеме: 
;;; (МНОГОФУН '(f g ... h) x) <=> (LIST (f x) (g x) ... (h x)).

(defun МНОГОФУН (func_lst x)
  (mapcar #'(lambda (y) (funcall y x)) func_lst))
  
;;;
;;; (МНОГОФУН '(listp car cdr length) '(1 2 3 4 5 6 7))
;;; (T 1 (2 3 4 5 6 7) 7)
;;; (МНОГОФУН '(sin cos) 0)
;;; (0.0 1.0)

